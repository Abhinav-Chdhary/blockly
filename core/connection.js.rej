***************
*** 39,45 ****
  Blockly.Connection = function(source, type) {
    this.sourceBlock_ = source;
    this.targetConnection = null;
-   this.type = type;
    this.x_ = 0;
    this.y_ = 0;
    this.inDB_ = false;
--- 39,50 ----
  Blockly.Connection = function(source, type) {
    this.sourceBlock_ = source;
    this.targetConnection = null;
+   if (type == Blockly.INDENTED_VALUE) {
+     this.type = Blockly.INPUT_VALUE;
+     this.subtype = Blockly.INDENTED_VALUE;
+   } else {
+     this.type = type;
+   }
    this.x_ = 0;
    this.y_ = 0;
    this.inDB_ = false;
***************
*** 176,181 ****
  
    // Demote the inferior block so that one is a child of the superior one.
    childBlock.setParent(parentBlock);
  
    if (parentBlock.rendered) {
      parentBlock.svg_.updateDisabled();
--- 181,188 ----
  
    // Demote the inferior block so that one is a child of the superior one.
    childBlock.setParent(parentBlock);
+   // Rendering the child node will trigger a rendering of its parent.
+   // Rendering the parent node will move its connected children into position.
  
    if (parentBlock.rendered) {
      parentBlock.svg_.updateDisabled();
***************
*** 510,518 ****
      // One or both sides are promiscuous enough that anything will fit.
      return true;
    }
-   // Find any intersection in the check lists.
    for (var x = 0; x < this.check_.length; x++) {
-     if (otherConnection.check_.indexOf(this.check_[x]) != -1) {
        return true;
      }
    }
--- 517,536 ----
      // One or both sides are promiscuous enough that anything will fit.
      return true;
    }
+   // Find any intersection in the check lists,
+   // or if the check is a function, evaluate the function.
    for (var x = 0; x < this.check_.length; x++) {
+     if ((otherConnection.check_.indexOf(this.check_[x]) != -1) ||
+         (typeof this.check_[x] == "function" && this.check_[x](this,otherConnection))) {
+       return true;
+     }
+   }
+ 
+   // If the check is a function on the other connection,
+   // evaluate the function to see if it evaluates to true.
+   for (var x = 0; x < otherConnection.check_.length; x++) {
+     if (typeof otherConnection.check_[x] == "function" &&
+         otherConnection.check_[x](otherConnection,this)) {
        return true;
      }
    }
